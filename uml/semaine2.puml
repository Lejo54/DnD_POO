@startuml
skinparam classAttributeIconSize 0
skinparam classFontStyle Bold
top to bottom direction
'skinparam style strictuml
hide empty members
skinparam linetype ortho
class Main
{
    +{static} main(args:String[*])
}
Main .-> partie.MJ : <<Instantiate>> >

package entites #Orange{
    abstract class Entite <<abstract>>{
      -m_nom: String
      + void perdrePV(int pvRetire)
      + void passerLeTour()
      + void deplacement()
      + void attaquer(Entite entite)
      + getPositionX(): integer
      + getPositionY(): integer
    }
    Entite .-> partie.De : <<use>> >
    class Action{
      - m_nom: String
      - m_estUtilisee: boolean
      + utilise(): void
      + getNom(): String
      + getUtilisation(): boolean
    }
    class Statistiques {
      - m_pv: integer
      - m_initiative: integer
      - m_vitesse: integer
      - m_force: integer
      - m_dexterite: integer
      + getPV(): integer
      +getInitiative(): integer
      +getVitesse(): integer
      +getForce(): integer
      +getForce(): integer
      +getDexterite(): integer
    }

    class Personnage extends Entite {
      - m_nom: String
      - m_classe: String
      + void equipeArme(Arme arme)
      + void equipeArmure(Armure armure)
      + ramasserEquipement(): void
    }

    class Monstre extends Entite{
      - m_espece: String
      - m_numero: integer
      - m_portee: integer
      - m_degat: String
      - m_classeArmure: integer

    }
    abstract class Race <<abtract>>{
      - m_nom: String
      +getNom(): String
    }
    class Elfe extends Race{}
    class Humain extends Race{}
    class Nain extends Race{}
    class Halfelin extends Race{}

    abstract class CharClasse <<abstract>>{
      - m_nom: String
      +getNom(): String
    }
    class Clerc extends CharClasse{}
    class Guerrier extends CharClasse{}
    class Magicien extends CharClasse{}
    class Roublard extends CharClasse{}
 'lien Entites
  Entite "1" *-----> "1\n -m_statistiques" Statistiques : est composé de >
  Entite "*" *---> "*\n -m_actions" Action: peut utiliser >
  Personnage "1" *--> "1\n -m_race" Race: est >
  Race "1" *--> "1\n -m_bonusMalus" Statistiques: possède >
  Personnage "1" *--> "1\n -m_race" CharClasse: est >
  CharClasse "1" *--> "1\n -m_bonusMalus" Statistiques: possède >
  Entite .> Entite : attaque >


}

package equipements #LightBlue{

    abstract class Equipement <<abstract>>{
      - m_actif: boolean
      - m_nom: String
      - m_description: String
      +<<create>> Equipement(nom: String, description: String, actif: boolean)
      +<<create>> Equipement()
      + estEquipe(): boolean
      + getNom(): String
      + getPosition: Position
      + void Equiper()
    }


    abstract class Armure <<abstract>> extends Equipement {
      - m_classeArmure: integer
      +<<create>> Armure(nom: String, description: String, actif: boolean, classArmure: integer)
      + getClasseArmure(): integer
    }
    class ArmureLourde extends Armure{
     +<<create>> ArmureLourde(nom: String, description: String, actif: boolean)
    }
    class ArmureLegere extends Armure{
    +<<create>> ArmureLegere(nom: String, description: String, actif: boolean)
    }

    abstract class Arme <<abstract>> extends Equipement {
      - m_degat: String
      - m_portee: integer
      +<<create>> Arme (nom: String, description: String, actif: boolean)

    }
    class ArmeGuerre extends Arme{
      +<<create>> ArmeGuerre(nom: String, description: String, actif: boolean, portee: integer, degat: String)
    }
    class ArmeCourante extends Arme{
      +<<create>> ArmeCourante(nom: String, description: String, actif: boolean, portee: integer, degat: String)
    }
    class ArmeDistance extends Arme{
      +<<create>> ArmeDistance(nom: String, description: String, actif: boolean, portee: integer, degat: String)
    }
}
'lien entre Equipements et Entites
Personnage "*" *--> "*\n -m_inventaire" Equipement: possède >
ArmeGuerre "1" *----> "1\n -m_bonusMalus" Statistiques: possède >
ArmureLourde "1" *----> "1\n -m_malus" Statistiques: possède >
Personnage .> Equipement : equipe >
'Autres liens
Equipement "1" *----> "1\n -m_position" donjons.Position: est en >
Entite "1" *----> "1\n -m_position" donjons.Position: est en >

package partie #purple{
    class Partie {
      + creerMonstre(): Monstre[*]
      + creerObstacle(): Obstacle[*]
      + creerEquipement(): Equipement[*]
      + creerDonjon(): Donjon
    }
    Partie "*" o---> "*\n -m_joueurs" Personnage : jouent >
    Partie "*" .> Monstre : <<Instantiate>> >
    Partie "*" .> donjons.Obstacle : <<Instantiate>> >
    Partie "*" .> Equipement : <<Instantiate>> >
    Partie "1" .-> donjons.Donjon : <<Instantiate>> >

    class MJ {
      + creerPersonnage(): Personnage
      + void lancerPartie(Donjon donjon)
    }
    MJ "*" .-> Personnage : <<Instantiate>> >
    MJ .-> Partie : <<use>> >
    abstract class Affichage <<abstract>>{
      + {static}void afficherDonjon(donjon: Donjon)
      + {static}void afficherBandeauTour()
      + {static}void afficherPhrase(phrase: String )
      + {static}void afficherInfoEntite(entite: Entite )
      + {static}void afficherActionEntite(entite: Entite )
    }
    abstract class De <<abstract>>{
      + {static}lancerDe(nbLance: integer,tailleLancer : integer ): integer
    }
}
package donjons #Lightgreen{
    class Donjon{
        +<<create>> Donjon(objetAuSol: Equipement[*] ,entites: Entite[*] ,obstacles:Obstacle[*] )
        getTaille(): Position
        getObstacle(): Obstacle[*]
        getObjets(): Equipement[*]
        getEntites(): Entite[*]
        contientObstacle(x: integer, y: integer): boolean
        contientEntite(x: integer, y: integer ): boolean
        contientEquipement(x: integer ,y: integer ): boolean
        }

    Donjon "1" *---> "1\n -m_taille" Position : mesure >
    Donjon "*" *---> "*\n -m_obstacle" donjons.Obstacle : contient >
    Donjon "*" *---> "*\n -m_objetAuSol" Equipement : contient >
    Donjon "*" o---> "*\n -m_Entite" Entite : contient >


    class Position{
       - m_x: integer
       - m_y: integer
       +<<create>> Position()
       +<<create>> Position(x: integer , y: integer)
       + getX(): integer
       + getY(): integer
       +void changeX(newX: integer )
       +void changeY(newY: integer )
       +void changeXY(newX: integer ,newY: integer )
     }
    class Obstacle {
       +<<create>> Obstacle(x: integer, y: interger)
       +getPosition(): Position
     }
     donjons.Obstacle "1" *--> "1\n -m_position" donjons.Position: est en >
}




@enduml

