@startuml
skinparam classAttributeIconSize 0
skinparam classFontStyle Bold
top to bottom direction
'skinparam style strictuml
hide empty members
<<<<<<< HEAD

<<<<<<< HEAD
class Entite {
  - positionX: int
  - positionY: int
  - statut: Status
  + perdre_des_pv(int vie_a_retirer) : void
  + dormir(): void
  + deplacement(): void
  + attaquer(): void
}

class Status {
  - point_de_vie: int
  - initiative: int
  - vitesse: int
  - force: int
  - dexterite: int
}


class Personnage {
  - nom: String
  - race: String
  - classe: String
  - inventaire: List<Equipement>
  + sEquiper(): void
  + ramasserEquipement(): void
}

class Monstre {
  - espece: String
  - numero: int
  - portee: int
  - degat: String
  - classe_d_armure: int
}
=======
=======
skinparam linetype ortho
>>>>>>> e5765e05b433df6f9504518cfc30c49f656fcc9b
class Main
{
    +{static} main(args:String[*])
}

package Entites #Orange{
    class Entite {
      + void perdrePV(int pvRetire)
      + void passerLeTour()
      + void deplacement()
      + void attaquer(Entite entite)
      + getPositionX(): integer
      + getPositionY(): integer
    }
    class Action{
      - m_nom: String
      - m_estUtilisee: boolean
      + utilise(): void
      + getNom(): String
      + getUtilisation(): boolean
    }
    class Statistiques {
      - m_pv: integer
      - m_initiative: integer
      - m_vitesse: integer
      - m_force: integer
      - m_dexterite: integer
      + getPV(): integer
      +getInitiative(): integer
      +getVitesse(): integer
      +getForce(): integer
      +getForce(): integer
      +getDexterite(): integer
    }

    class Personnage extends Entite {
      - m_nom: String
      - m_classe: String
      + void equipeArme(Arme arme)
      + void equipeArmure(Armure armure)
      + ramasserEquipement(): void
    }

    class Monstre extends Entite{
      - m_espece: String
      - m_numero: integer
      - m_portee: integer
      - m_degat: String
      - m_classeArmure: integer

    }
    abstract class Race{
      - m_nom: String
    }
    class Elfe extends Race{}
    class Humain extends Race{}
    class Nain extends Race{}
    class Halfelin extends Race{}

    abstract class CharClasse{}
    class Clerc extends CharClasse{}
    class Guerrier extends CharClasse{}
    class Magicien extends CharClasse{}
    class Roublard extends CharClasse{}
 'lien Entites
  Entite "1" *-left-> "1\n -m_statistiques" Statistiques : est composé de
  Entite "*" *--> "*\n -m_actions" Action: peut utiliser
  Personnage "1" *--> "1\n -m_race" Race: est
  Race "1" *--> "1\n -m_bonusMalus" Statistiques: possède
  Personnage "1" *--> "1\n -m_race" CharClasse: est
  CharClasse "1" *--> "1\n -m_bonusMalus" Statistiques: possède
  Entite .> Entite : attaque

}

package Equipements #LightBlue{
>>>>>>> 6fd6609c31e20df1c60d6f96878e42ab56e67d95

    class Equipement {
      - m_actif: boolean
      - m_nom: String
      - m_description: String
      + estEquipe(): boolean
      + getNom(): String
    }

<<<<<<< HEAD
class Armure {
  - type_armure: String
  - classe_armure: int
}

class Arme {
  - type_arme: String
  - degat: String
  - portee: int
=======
    class Armure extends Equipement {
      - m_classeArmure: integer
    }
    class ArmureLourde extends Armure{
    }
    class ArmureLegere extends Armure{
    }

    class Arme extends Equipement {
      - m_degat: String
      - m_portee: integer
      //dans chaque heritage faire un "constructeur" pour chaques armes et les armures aussi
    }
    class ArmeGuerre extends Arme{
    }
    class ArmeCourante extends Arme{
    }
    class ArmeDistance extends Arme{
    }
>>>>>>> 6fd6609c31e20df1c60d6f96878e42ab56e67d95
}
'lien entre Equipements et Entites
Personnage "*" *--> "*\n -m_inventaire" Equipement: possède
ArmeGuerre "1" *----> "1\n -m_bonusMalus" Statistiques: possède
ArmureLourde "1" *----> "1\n -m_malus" Statistiques: possède
Personnage .> Equipement : equipe
'Autres liens
Equipement "1" *----> "1\n -m_position" Donjons.Position: est en
Entite "1" *----> "1\n -m_position" Donjons.Position: est en
Donjons.Obstacle "1" *--> "1\n -m_position" Donjons.Position: est en

package Partie #purple{
    class Partie {
      - entites: List<Entite> <<triée par initiative>>
      - obstacles: List<Obstacle>
      - equipementsSol: List<Equipement>


    }
    class MJ {
      + void commenterAction()
      + creerEntite(): List<Entite>
      + creerPersonnage(): Personnage
      + creerMonstre(): Monstre
      + void lancerPartie() //boucle for de 3 pour les 3 donjons
      + void piloterTour()
    }
    class Affichage{
     + {static}void afficherDonjon(Donjon donjon)
     + {static}void afficherBandeauTour()
     + {static}void afficherPhrase(String phrase)
     + {static}void afficherInfoEntite(Entite entite)
     + {static}void afficherActionEntite(Entite entite)
    }
    class De {
      + {static}lancerDe(nbLance: integer,tailleLancer : integer ): integer
    }
}
package Donjons #Lightgreen{
    class Donjon{
          - m_objetAuSol: List<Equipement>
          - m_entites: List<Entite>

<<<<<<< HEAD
class MJ {
  - phrasesTaquines: List<String>
  + commenterAction(): void
  + creerPersonnage(): Personnage
<<<<<<< HEAD
  + lancerPartie(): void
  + piloterTour(): void
  + annoncerEvenement(String evenement): void
  + afficherCarte(entites: List<Entite>, obstacles: List<Obstacle>, equipements: List<Equipement>): void
}

Personnage --|> Entite
Monstre --|> Entite
Arme --|> Equipement
Armure --|> Equipement
=======
  + creerMonstre(): Monstre
  + lancerPartie(): void
  + piloterTour(): void
=======
        }
    class Position{
       - m_x: integer //-1 si non placé
       - m_y: integer //same
       +void changeX( int newX)
       +void changeY( int newY)
       +void changeXY( integer newX, integer newY)
     }
     class Obstacle {
       +getPosition(): integer
     }
>>>>>>> e5765e05b433df6f9504518cfc30c49f656fcc9b
}
' Liens logiques
/'MJ --> Personnage : crée
MJ --> Partie : contrôle
MJ --> Tour : pilote
MJ --> Monstre : contrôle
MJ --> De : commente les jets
MJ --> Entite : affiche
MJ --> Obstacle : affiche
MJ --> Equipement : affiche
Tour --> Entite : joueur
Partie --> Entite : contient
Partie --> Obstacle : contient
Partie --> Equipement : contient
Entite --> De : utilise pour attaque/dégâts '/


>>>>>>> 6fd6609c31e20df1c60d6f96878e42ab56e67d95


MJ --> Personnage : crée
Entite *-- Status : statut
MJ --> Partie : contrôle
MJ --> Tour : pilote
MJ --> Monstre : contrôle
MJ --> De : commente les jets
MJ --> Entite : affiche
MJ --> Obstacle : affiche
MJ --> Equipement : affiche
Tour --> Entite : joueur
Partie --> Entite : contient
Partie --> Obstacle : contient
Partie --> Equipement : contient
Personnage --> Equipement : inventaire
Entite --> De : utilise pour attaque/dégâts

@enduml

