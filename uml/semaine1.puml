@startuml
skinparam classAttributeIconSize 0
skinparam classFontStyle Bold
left to right direction
'skinparam style strictuml
hide empty members

<<<<<<< HEAD
class Entite {
  - positionX: int
  - positionY: int
  - statut: Status
  + perdre_des_pv(int vie_a_retirer) : void
  + dormir(): void
  + deplacement(): void
  + attaquer(): void
}

class Status {
  - point_de_vie: int
  - initiative: int
  - vitesse: int
  - force: int
  - dexterite: int
}


class Personnage {
  - nom: String
  - race: String
  - classe: String
  - inventaire: List<Equipement>
  + sEquiper(): void
  + ramasserEquipement(): void
}

class Monstre {
  - espece: String
  - numero: int
  - portee: int
  - degat: String
  - classe_d_armure: int
}
=======
class Main
{
    +{static} main(args:String[*])
}

package Entites #Orange{
    class Entite {
      - m_positionX: int
      - m_positionY: int
      + void perdre_des_pv(int vie_a_retirer)
      + void passerLeTour()
      + void deplacement()
      + void attaquer(Monstre monstre)
      + getPositionX(): int
      + getPositionY(): int
    }
    class Action{
      - m_nom: String
      - m_estUtilisee: boolean
      + utilise(): void
      + getNom(): String
      + getUtilisation(): boolean
    }
    class Statistiques {
      - m_pv: int
      - m_initiative: int
      - m_vitesse: int
      - m_force: int
      - m_dexterite: int
      + getPV(): int
      +getInitiative(): int
      +getVitesse(): int
      +getForce(): int
      +getForce(): int
      +getDexterite(): int
    }

    class Personnage extends Entite {
      - m_nom: String
      - m_classe: String
      + void equipeArme(Arme arme)
      + void equipeArmure(Armure armure)
      + ramasserEquipement(): void
    }

    class Monstre extends Entite{
      - m_espece: String
      - m_numero: int
      - m_portee: int
      - m_degat: String
      - m_classeArmure: int

    }
    abstract class Race{
      - m_nom: String
    }
    class Elfe extends Race{}
    class Humain extends Race{}
    class Nain extends Race{}
    class Halfelin extends Race{}

    abstract class CharClasse{}
    class Clerc extends CharClasse{}
    class Guerrier extends CharClasse{}
    class Magicien extends CharClasse{}
    class Roublard extends CharClasse{}
 'lien Entites
  Entite "1" *-left-> "1\n -m_statistiques" Statistiques : est composé de
  Entite "*" *--> "*\n -m_actions" Action: peut utiliser
  Personnage "1" *--> "1\n -m_race" Race: est
  Race "1" *--> "1\n -m_bonusMalus" Statistiques: possède
  Personnage "1" *--> "1\n -m_race" CharClasse: est
  CharClasse "1" *--> "1\n -m_bonusMalus" Statistiques: possède
  Entite .> Entite : attaque

}

package Equipements #LightBlue{
>>>>>>> 6fd6609c31e20df1c60d6f96878e42ab56e67d95

    class Equipement {
      - m_actif: boolean
      - m_nom: String
      - m_description: String
      + estEquipe(): boolean
      + getNom(): String
    }

<<<<<<< HEAD
class Armure {
  - type_armure: String
  - classe_armure: int
}

class Arme {
  - type_arme: String
  - degat: String
  - portee: int
=======
    class Armure extends Equipement {
      - m_classeArmure: int
    }
    class ArmureLourde extends Armure{
    }
    class ArmureLegere extends Armure{
    }

    class Arme extends Equipement {
      - degat: String
      - portee: int
    }
    class ArmeGuerre extends Arme{
    }
    class ArmeCourante extends Arme{
    }
    class ArmeDistance extends Arme{
    }
>>>>>>> 6fd6609c31e20df1c60d6f96878e42ab56e67d95
}
'lien entre Equipements et Entites
Personnage "*" *--> "*\n -m_inventaire" Equipement: possède
ArmeGuerre "1" *--> "1\n -m_bonusMalus" Statistiques: possède
ArmureLourde "1" *--> "1\n -m_malus" Statistiques: possède
Personnage .> Equipement : equipe
class Obstacle {
  - positionX: int
  - positionY: int
}

interface De {
  + lancerDe(nbLance: int,taille_lancer : int ): int
}

class Tour {
  - affichage: String
  - joueur: Entite
  + Tour(joueurs: List<Entite>): String
}

class Partie {
  - entites: List<Entite> <<triée par initiative>>
  - obstacles: List<Obstacle>
  - equipements: List<Equipement>
  + main(): void
  + creerPartie(): void
  + demarrerPartie(): void
  + deroulement(): void
}

class MJ {
  - phrasesTaquines: List<String>
  + commenterAction(): void
  + creerPersonnage(): Personnage
<<<<<<< HEAD
  + lancerPartie(): void
  + piloterTour(): void
  + annoncerEvenement(String evenement): void
  + afficherCarte(entites: List<Entite>, obstacles: List<Obstacle>, equipements: List<Equipement>): void
}

Personnage --|> Entite
Monstre --|> Entite
Arme --|> Equipement
Armure --|> Equipement
=======
  + creerMonstre(): Monstre
  + lancerPartie(): void
  + piloterTour(): void
}

' Liens logiques
/'MJ --> Personnage : crée
MJ --> Partie : contrôle
MJ --> Tour : pilote
MJ --> Monstre : contrôle
MJ --> De : commente les jets
MJ --> Entite : affiche
MJ --> Obstacle : affiche
MJ --> Equipement : affiche
Tour --> Entite : joueur
Partie --> Entite : contient
Partie --> Obstacle : contient
Partie --> Equipement : contient
Entite --> De : utilise pour attaque/dégâts '/


>>>>>>> 6fd6609c31e20df1c60d6f96878e42ab56e67d95


MJ --> Personnage : crée
Entite *-- Status : statut
MJ --> Partie : contrôle
MJ --> Tour : pilote
MJ --> Monstre : contrôle
MJ --> De : commente les jets
MJ --> Entite : affiche
MJ --> Obstacle : affiche
MJ --> Equipement : affiche
Tour --> Entite : joueur
Partie --> Entite : contient
Partie --> Obstacle : contient
Partie --> Equipement : contient
Personnage --> Equipement : inventaire
Entite --> De : utilise pour attaque/dégâts

@enduml

