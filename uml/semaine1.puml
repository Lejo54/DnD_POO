@startuml

class Entite {
  - positionX: int
  - positionY: int
  - point_de_vie: int
  - initiative: int
  - vitesse: int
  - force: int
  - dexterite: int
  + perdre_des_pv(int vie_a_retirer) : void
  + dormir(): void
  + deplacement(): void
  + attaquer(): void
}

class Personnage {
  - nom: String
  - race: String
  - classe: String
  - inventaire: List<Equipement>
  + sEquiper(): void
  + ramasserEquipement(): void
}

class Monstre {
  - espece: String
  - numero: int
  - portee: int
  - degat: String
  - classe_d_armure: int
}

class Equipement {
  - actif: boolean
}

class Armure {
  - type_armure: String
  - classe_armure: int
}

class Arme {
  - type_arme: String
  - degat: String
  - portee: int
}

class Obstacle {
  - positionX: int
  - positionY: int
}

interface De {
  + lancerDe(nbLance: int,taille_lancer : int ): int
}

class Tour {
  - affichage: String
  - joueur: Entite
  + Tour(joueurs: List<Entite>): String
}

class Partie {
  - entites: List<Entite> <<triée par initiative>>
  - obstacles: List<Obstacle>
  - equipements: List<Equipement>
  + main(): void
  + creerPartie(): void
  + demarrerPartie(): void
  + deroulement(): void
}

class MJ {
  - phrasesTaquines: List<String>
  + commenterAction(): void
  + creerPersonnage(): Personnage
  + lancerPartie(): void
  + piloterTour(): void
  + annoncerEvenement(String evenement): void
  + afficherCarte(entites: List<Entite>, obstacles: List<Obstacle>, equipements: List<Equipement>): void
}

' Héritages
Personnage --|> Entite
Monstre --|> Entite
Arme --|> Equipement
Armure --|> Equipement

' Liens logiques
MJ --> Personnage : crée
MJ --> Partie : contrôle
MJ --> Tour : pilote
MJ --> Monstre : contrôle
MJ --> De : commente les jets
MJ --> Entite : affiche
MJ --> Obstacle : affiche
MJ --> Equipement : affiche
Tour --> Entite : joueur
Partie --> Entite : contient
Partie --> Obstacle : contient
Partie --> Equipement : contient
Personnage --> Equipement : inventaire
Entite --> De : utilise pour attaque/dégâts

@enduml

